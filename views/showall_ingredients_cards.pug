extends main_layout_template

block content
	style.
		.btn_card{
			/*Defines CSS for butons on the dashboard*/
			width: 93%;
			margin: 0px 10px 10px 10px;
		}
		.card-content{
			color:#570573;
			background-color:#faf8eb;
		}

	div(class='container-fluid', class='rounded', style='width: 90%')
		br
		br
		br
		br
		h1.dp-title-text #{title}
		br
		.form-row
			.form-group.col-md-auto
				a.btn.dp-change-view(href='/ingredients/showall')
					i.dp-change-view.fa.fa-list.fa-lg.mr-1
					| Table View
			.form-group.col-md-2
					input.form-control.dp-form-fields.mr-sm-2(id='filterInput', onkeyup='search()', type='text', placeholder='Search', class='form-group')
			.form-group.col-md-2
				.dropdown
					select.form-control.dp-form-fields(id='sortBar', name='SortBar', onchange='sortList()', class='selection-drop')
						option(value='0') Sort By
						option(value='1') Sort A-Z
						option(value='2') Sort Z-A
			.form-group.col-md-2
				a.btn.dp-btn-secondary(href='/ingredients/add', class='h-70')
					| Add Multiple Ingredients
		#accordion
			.card
				#headingTwo.card-header
					button.btn.dp-btn-primary.collapsed.ml-2(data-toggle='collapse', data-target='#collapseTwo', aria-expanded='false', aria-controls='collapseTwo')
						| Add ingredient
				#collapseTwo.collapse(aria-labelledby='headingTwo', data-parent='#accordion')
					.card-body
						form(method= 'POST', action= '/ingredients/add', class= 'form', enctype="multipart/form-data")
							.form-row(class='rounded')
								.col-sm-1.mt-3.mr-0
									img#output(width='40', height='40')
								.form-group.col-md-2.mt-3.mr-0.ml-0
									label.btn.dp-btn-secondary.btn-file Choose image
										input(name='image', accept='image/*' ,type='file', style='display: none;', onchange='loadFile(event)')

								//- .form-group.col-md-4
								//- 	img#output.mr-2.ml-2.mt-2(width='40', height='40')
								//- 	input(type='file', id='image', name='image', accept='image/*', onchange='loadFile(event)', class='align-middle')
								.form-group.col-md-2.ml-0
									input.form-control.mt-3.dp-form-fields(name='ingredientProperties[0]', type='text', placeholder='Name = Tuna')
								.form-group.col-md-1
									input.form-control.mt-3.dp-form-fields(name='ingredientProperties[0]', type='text', placeholder='Total = 2')
								.form-group.col-md-2
									.dropdown-inline
									select.form-control.mt-3.dp-form-fields(name='ingredientProperties[0]', required)
										option(value='') Measurement
										option(value='tsp.') Teaspoon
										option(value='tbsp.') Tablespoon
										option(value='fl oz') Fluid Ounce
										option(value='cup') Cup
										option(value='quart') Quart
										option(value='ml') Millilitre
										option(value='lb') Pound
										option(value='oz') Dry Ounce
								.form-group.col-md-2
									input.form-control.mt-3.dp-form-fields(name='ingredientProperties[0]', type='date')
								.form-group.col-md-1
									.dropdown-inline
									select.form-control.mt-3.dp-form-fields(name='ingredientProperties[0]', required)
										option(value='') Priority Item?
										option(value='High') Yes
										option(value='Low') No
								.col-md-1
									input.btn.dp-btn-primary.mt-3(type='submit', value='Add', class='form-group')
		.form-row
			//-for each ingredient in data
			//for ingredient,i in data
			for item in results
				//-get recipe image
				- ingredient_image= item.ingredient_image_path
				.form-group.col-md-3
					div.card-content(id=item.ingredient_id, class='card', class='h-100')
						img.image(class='card-img-top', src=ingredient_image, alt='image')
						div(class='card-body')
							h4(class='card-title') #{item.ingredient_name}
							p(class='card-text') #{item.ingredient_amount} #{item.ingredient_unit_of_measurement} expires on #{item.ingredient_expiration_date}
							p(class='card-text') This is a #{item.priority} priority item.
						div(class='dp-card-footer')
							button.btn_card.btn.btn-outline-danger.delete-ingredient(href='#',data-id=item.ingredient_id,data-ex=item.ingredient_expiration_date, data-unit=item.ingredient_unit_of_measurement, data-qty=item.ingredient_amount)  Remove From Pantry

	script.
		var loadFile = function(event) {
			var output = document.getElementById('output');
			output.src = URL.createObjectURL(event.target.files[0]);
			output.classList.add("img-thumbnail");
			document.getElementById("output").style.display = 'block';
			document.getElementById("output").style.width = '40px';
			document.getElementById("output").style.height = '40px';
			}
		//This will trigger once user stars to type text into a search bar
		function search() {
			// Declare variables
			var input, filter, div, i, txtValue;
			//get the search bar input
			input = document.getElementById('filterInput');
			//Set all letters to upper case
			filter = input.value.toUpperCase();
			//get all card names
			card_names = document.getElementsByTagName('h5');
			//get all cards
			div = document.getElementsByClassName('col-md-3');

			// Loop through all list items, and hide those who don't match the search query
			for (i = 0; i < div.length; i++) {
				txtValue = card_names[i].textContent || card_names[i].innerText;
				if (txtValue.toUpperCase().indexOf(filter) > -1) {
					//show
					div[i].style.display = "";
				} 
				else {
					//hide
					div[i].style.display = "none";
				}
			}
		}
		//Function based on sort select dropdown box
		function sortList() {
			var list, i, switching, b, shouldSwitch;
			//get all cards
			list = document.getElementsByClassName("col-md-3");
			switching = true;
			var e = document.getElementById("sortBar");
			var optionValue = e.options[e.selectedIndex].value;
			/* Make a loop that will continue until
			no switching has been done: */
			if(optionValue != 0){
				while (switching) {
					// Start by saying: no switching is done:
					switching = false;
					b = document.getElementsByTagName('h5');
					// Loop through all list items:
					for (i = 0; i < (b.length - 1); i++) {
						//Initial condition (no switches)
						shouldSwitch = false;
						/* Check if the next item should
						switch place with the current item: */
						//If sort by A-Z is selected
						if(optionValue == 1){
							if (b[i].innerHTML.toLowerCase() > b[i + 1].innerHTML.toLowerCase()) {
								/* If next item is alphabetically lower than current item,
								mark as a switch and break the loop: */
								shouldSwitch = true;
								break;
							}
						}
						//If sort by Z-A is selected
						else if(optionValue == 2){
							if (b[i].innerHTML.toLowerCase() < b[i + 1].innerHTML.toLowerCase()) {
								/* If next item is alphabetically higher than current item,
								mark as a switch and break the loop: */
								shouldSwitch = true;
								break;
							}
						}
					}
						if (shouldSwitch) {
							list[i].parentNode.insertBefore(list[i + 1], list[i]);
							switching = true;
						}
				}
			}
		}