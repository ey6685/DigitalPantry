//- CREATED BY OSKARS DAUKSTS
//- This page is used for displaying all recipes to the volunteers
extends main_layout_template

block content
	style.
		.btn_card{
			/*Defines CSS for butons on the dashboard*/
			width: 93%;
			margin: 0px 10px 10px 10px;
		}
		.individual-recipe{
			padding:3px;
		}
		.individual-recipe:hover{
			background-color: #a2f02d;
			color:black;
		}
		.morecontent span {
			display: none;
		}
		.morelink {
			display: block;
		}
		.card{
			color:#570573;
			background-color:#faf8eb;
		}
		.delete-button{
			outline-style: solid;
			outline-color: red;
			outline-width: medium;
			color: red;
			font-weight: bold;
		}
		.selected{
			background-color:orange;
		}
		a.morelink:link {color:#58534d; TEXT-DECORATION: none}
		a.morelink:visited {color:#58534d; TEXT-DECORATION: none}
		a.morelink:active {color:#f5f5dc; TEXT-DECORATION: none}
		a.morelink:hover {color:#f5f5dc; TEXT-DECORATION: none}
	div(class='container-fluid', class='rounded', style='width: 90%')
		br
		br
		br
		br
		h1.dp-title-text #{title}
		br
		.form-row
			.form-group.col-md-auto
				a.btn.dp-change-view(href='/recipes/showall')
					i.dp-change-view.fa.fa-list.fa-lg.mr-1
					| Table View
			.form-group.col-md-2
				input.form-control.dp-form-fields.mr-sm-2(id='filterInput', onkeyup='search()', type='text', placeholder='Search', class='form-group')
			.form-group.col-md-2
				.dropdown
					select.form-control.dp-form-fields(id='sortBar', name='SortBar', onchange='sortList()', class='selection-drop')
						option(value='0') Sort By
						option(value='1') Sort A-Z
						option(value='2') Sort Z-A
			.form-group.col-md-2
				form(method='GET', action='/recipes/add')
					input.btn.dp-btn-secondary(type='submit', value='Add Recipe', class='form-group', id='submit-showrec', class='h-75')
		.form-row
			//-for each recipe in data
			for recipe,i in results
				//-get recipe image
				- recipe_image= recipe.recipe_image_path
				.form-group.col-md-3
					div(id=recipe.recipe_id, class='card', class='h-100',image_p=recipe.recipe_image_path,r_name=recipe.recipe_name,r_directions = recipe.recipe_directions, r_serv= recipe.num_people_it_feeds, ing=ingredients[i])
						img.image(class='card-img-top', src=recipe_image, alt='image', )
						div(class='card-body')
							h4(class='card-title') #{recipe.recipe_name}
							p#servingSize Serves #{(recipe.num_people_it_feeds)} people
							//- For each steps inside of the array of steps
							for step,x in recipe_steps[i]
								p(id='recipeStep'+x class='recipeStep' class='card-text')= step
						div(class='card-foot', padding='.75rem')
							button.btn_card.btn.btn-outline-danger(class='delete-recipe', data-id= recipe.recipe_id, type='button', id='delete-showrec') Remove From Pantry

	script.
		var allData = '!{data}'
		allData = JSON.parse(allData)
		var recipeData = '!{str_res}'
		recipeData = JSON.parse(recipeData)
		function addIngredient(){
			let template = `
			<div class="form-row">
				<div class="form-group col-md-4">
					<input class="form-control" name="ingredientName" type="text" placeholder="Ingredient = Chicken">
				</div>
				<div class="form-group col-md-3">
					<input class="form-control" name="ingredientQty" type="text" placeholder="Quantity = 2">
				</div>
				<div class="dropdown-inline col-md-4">
					<select class="form-control" name="ingredientMeasurement">
						<option value="">Measurement</option>
						<option value="fl oz">fluid ounce</option>
						<option value="ml">Mililliter</option>
						<option value="quart">Quart</option>
						<option value="lb">Pound</option>
						<option value="oz">Ounce</option>
						<option value="cup">Cup</option>
						<option value="tbsp.">Tablespoon</option>
						<option value="tsp.">Teaspoon</option>
					</select>
					</div>
				<div class="form-group col-1">
					<button type="button" class="btn btn-danger delete-row">X</button>
				</div>
			</div>`;
			let container = document.getElementById('dynamic-ingredient-row');
			let element = document.createElement('div');
			element.innerHTML = template;
			container.appendChild(element);
			i++
		}
		$(window).on('load', function() {
			var maxCharactersToShow = 40
			// For each card
			$('.card-body').each(function(index) {
				var totalCharacterLength = 0
				var previousCharacterLength= 0
				var $recipeName = $(this).find('h4').text()
				var $recipeIngredients = $(this).find('#servingSize').text()
				var $steps = $(this).find('.recipeStep')
				html = `<h4 class='card-title'>${$recipeName}</h4><p id='currentAmountOfIngredients'>${$recipeIngredients}</p><h5 class='card-title'>Recipe steps</h6>`
				currentStepLength = ""
				foundHidePoint = false
				//For each recipe step
				$.each($steps, function (index, value) {
					// Text content of a recipe step
					fullContent = value.textContent
					// number of characters in the current step
					currentStepLength = currentStepLength + value.innerText.length
					// update total number of characters
					totalCharacterLength = totalCharacterLength + currentStepLength
					if(totalCharacterLength > maxCharactersToShow && foundHidePoint == false){
						var difference =  maxCharactersToShow - previousCharacterLength
						var stillHaveSpaceFor = fullContent.substr(0, difference)
						var overflow = fullContent.substr(difference, currentStepLength-difference);
						html = html + `<p><span>${stillHaveSpaceFor}</span><span class='extra' style='display:none'>${overflow}</span></p>`
						foundHidePoint = true
					}
					else if(totalCharacterLength > maxCharactersToShow && foundHidePoint == true){
						html = html + `<p class='overflow' style='display:none'>${fullContent}</p>`
					}
					else{
						html = html + `<p>${fullContent}</p>`
					}
					previousCharacterLength = previousCharacterLength + currentStepLength
				});
				html = html + `<a href="" class="morelink">Show more</a>`
				$(this).html(html)
			});
			$(".morelink").click(function(e){
				e.preventDefault() 
				if($(this).hasClass("less")){
					$(this).removeClass("less")
					$(this).text('Show more')
					$(this).closest('.card-body').find('.overflow').hide()
					$(this).closest('.card-body').find('.extra').hide()
				}else{
					$(this).addClass("less")
					$(this).text('Show less')
					$(this).closest('.card-body').find('.overflow').show()
					$(this).closest('.card-body').find('.extra').show()
				}
			})
		})
		//This will trigger once user stars to type text into a search bar
		function search() {
			// Declare variables
			var input, filter, div, i, txtValue;
			//get the search bar input
			input = document.getElementById('filterInput');
			//Set all letters to upper case
			filter = input.value.toUpperCase();
			//get all card names
			card_names = document.getElementsByTagName('h5');
			//get all cards
			div = document.getElementsByClassName('col-md-3');

			// Loop through all list items, and hide those who don't match the search query
			for (i = 0; i < div.length; i++) {
				txtValue = card_names[i].textContent || card_names[i].innerText;
				if (txtValue.toUpperCase().indexOf(filter) > -1) {
					//show
					div[i].style.display = "";
				} 
				else {
					//hide
					div[i].style.display = "none";
				}
			}
		}
		//Function based on sort select dropdown box
		function sortList() {
			var list, i, switching, b, shouldSwitch;
			//get all cards
			list = document.getElementsByClassName("col-md-3");
			switching = true;
			var e = document.getElementById("sortBar");
			var optionValue = e.options[e.selectedIndex].value;
			/* Make a loop that will continue until
			no switching has been done: */
			if(optionValue != 0){
				while (switching) {
					// Start by saying: no switching is done:
					switching = false;
					b = document.getElementsByTagName('h4');
					// Loop through all list items:
					for (i = 0; i < (b.length - 1); i++) {
						//Initial condition (no switches)
						shouldSwitch = false;
						/* Check if the next item should
						switch place with the current item: */
						//If sort by A-Z is selected
						if(optionValue == 1){
							if (b[i].innerHTML.toLowerCase() > b[i + 1].innerHTML.toLowerCase()) {
								/* If next item is alphabetically lower than current item,
								mark as a switch and break the loop: */
								shouldSwitch = true;
								break;
							}
						}
						//If sort by Z-A is selected
						else if(optionValue == 2){
							if (b[i].innerHTML.toLowerCase() < b[i + 1].innerHTML.toLowerCase()) {
								/* If next item is alphabetically higher than current item,
								mark as a switch and break the loop: */
								shouldSwitch = true;
								break;
							}
						}
					}
						if (shouldSwitch) {
							list[i].parentNode.insertBefore(list[i + 1], list[i]);
							switching = true;
						}
				}
			}
		}
	script.
		localStorate.clear()
		$(`a[class='nav-link'][href='/recipes/showall']`).parent().addClass("selected");